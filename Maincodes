package org.example.service;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.example.model.*;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

@Service
public class DataService {

    private final RestTemplate restTemplate;
    private final ObjectMapper mapper;

    @Value("${api.financech.url}")
    private String financeChUrl;

    @Value("${api.kyc.url}")
    private String kycUrl;

    @Value("${auth.token.url}")
    private String authTokenUrl;

    @Value("${auth.basic.auth}")
    private String basicAuth;

    private String token;

    public DataService(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
        this.mapper = new ObjectMapper();
    }

    private void fetchAuthToken() {
        try {
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
            headers.set("Authorization", basicAuth);
            headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));

            HttpEntity<String> request = new HttpEntity<>("", headers);
            ResponseEntity<String> response = restTemplate.postForEntity(authTokenUrl, request, String.class);

            if (!response.getStatusCode().is2xxSuccessful()) {
                throw new RuntimeException("❌ Auth token API returned error: " + response.getStatusCode());
            }

            JsonNode json = mapper.readTree(response.getBody());
            this.token = json.path("access_token").asText();

            if (token == null || token.isBlank()) {
                throw new RuntimeException("❌ Token not found in auth response");
            }

            System.out.println("✅ Auth token fetched successfully");

        } catch (Exception e) {
            throw new RuntimeException("❌ Failed to fetch token: " + e.getMessage(), e);
        }
    }

    public List<MergedEntity> getAllMatchedPtyIdEntities() {
        List<MergedEntity> matchedEntities = new ArrayList<>();

        try {
            fetchAuthToken();

            HttpHeaders headers = new HttpHeaders();
            headers.setBearerAuth(this.token);
            headers.add("Accept", "*/*;version=gamma");
            HttpEntity<String> request = new HttpEntity<>(headers);

            // ✅ Fetch FinanceCH
            ResponseEntity<String> financeResponse = restTemplate.exchange(financeChUrl, HttpMethod.GET, request, String.class);
            if (!financeResponse.getStatusCode().is2xxSuccessful()) {
                throw new RuntimeException("❌ FinanceCH API returned error: " + financeResponse.getStatusCode());
            }

            JsonNode financeResults = mapper.readTree(financeResponse.getBody()).path("results");

            // ✅ Fetch KYC
            ResponseEntity<String> kycResponse = restTemplate.exchange(kycUrl, HttpMethod.GET, request, String.class);
            if (!kycResponse.getStatusCode().is2xxSuccessful()) {
                throw new RuntimeException("❌ KYC API returned error: " + kycResponse.getStatusCode());
            }

            JsonNode kycResults = mapper.readTree(kycResponse.getBody()).path("results");

            // ✅ Build KYC Map
            Map<String, JsonNode> kycMap = new HashMap<>();
            for (JsonNode kycResult : kycResults) {
                JsonNode identifiersNode = kycResult.path("identifiers");
                if (identifiersNode.isArray() && identifiersNode.size() > 0) {
                    Identifiers identifiers = mapper.convertValue(identifiersNode.get(0), Identifiers.class);
                    JsonNode kycData = getFieldIgnoreCase(kycResult, "kycData");
                    if (kycData != null && identifiers.getPtyId() != null) {
                        kycMap.put(identifiers.getPtyId(), kycData);
                    }
                }
            }

            // ✅ Loop through FinanceCH results
            for (JsonNode financeResult : financeResults) {
                JsonNode entityNode = financeResult.path("entity");
                if (entityNode.isMissingNode()) continue;

                Identifiers identifiers = mapper.convertValue(entityNode.path("identifiers"), Identifiers.class);
                String ptyId = identifiers.getPtyId();

                JsonNode kycData = kycMap.get(ptyId);
                if (kycData == null) continue;

                MergedEntity merged = new MergedEntity();
                merged.setIdentifiers(identifiers);

                // radixData
                List<RadixData> radixDataList = Optional.ofNullable(financeResult.path("radixData"))
                        .filter(JsonNode::isArray)
                        .map(array -> StreamSupport.stream(array.spliterator(), false)
                                .map(node -> mapper.convertValue(node, RadixData.class))
                                .collect(Collectors.toList()))
                        .orElse(Collections.emptyList());
                merged.setRadixData(radixDataList);

                // kycSegment
                Optional.ofNullable(getFieldIgnoreCase(kycData, "kycSegment"))
                        .filter(JsonNode::isTextual)
                        .map(JsonNode::asText)
                        .ifPresent(merged::setKycSegments);

                // kycSites
                Optional.ofNullable(getFieldIgnoreCase(kycData, "kycSites"))
                        .filter(JsonNode::isArray)
                        .map(array -> mapper.convertValue(array, new TypeReference<List<KycSites>>() {}))
                        .ifPresent(merged::setKycSites);

                // riskIndustry
                Optional.ofNullable(getFieldIgnoreCase(kycData, "riskIndustry"))
                        .filter(JsonNode::isArray)
                        .map(array -> mapper.convertValue(array, new TypeReference<List<RiskIndustry>>() {}))
                        .ifPresent(merged::setRiskIndustry);

                matchedEntities.add(merged);
            }

            System.out.println("✅ Total matched ptyIds: " + matchedEntities.size());

        } catch (Exception e) {
            System.err.println("❌ Error: " + e.getMessage());
            e.printStackTrace();
            throw new RuntimeException("❌ Failed to merge data", e);
        }

        return matchedEntities;
    }

    private JsonNode getFieldIgnoreCase(JsonNode node, String fieldName) {
        if (node == null || !node.isObject()) return null;
        Iterator<String> fieldNames = node.fieldNames();
        while (fieldNames.hasNext()) {
            String key = fieldNames.next();
            if (key.equalsIgnoreCase(fieldName)) {
                return node.get(key);
            }
        }
        return null;
    }
}
