public List<MergedEntity> getMergedEntities() {
    List<MergedEntity> mergedList = new ArrayList<>();

    try {
        // Setup headers
        HttpHeaders headers = new HttpHeaders();
        headers.setBearerAuth(token);
        headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));
        HttpEntity<String> request = new HttpEntity<>(headers);

        // Log outgoing request
        System.out.println("Fetching FinanceCH data from URL: " + financeChUrl);
        System.out.println("Fetching with token: " + token);

        // Fetch FinanceCH data
        ResponseEntity<String> financeResponse = restTemplate.exchange(financeChUrl, HttpMethod.GET, request, String.class);
        JsonNode financeRoot = mapper.readTree(financeResponse.getBody());
        JsonNode financeResults = financeRoot.path("results");

        // Fetch KYC data
        System.out.println("Fetching KYC data from URL: " + kycUrl);
        ResponseEntity<String> kycResponse = restTemplate.exchange(kycUrl, HttpMethod.GET, request, String.class);
        JsonNode kycRoot = mapper.readTree(kycResponse.getBody());
        JsonNode kycResults = kycRoot.path("results");

        // Build kycMap from ptyId -> kycData
        Map<String, JsonNode> kycMap = new HashMap<>();
        for (JsonNode kycResult : kycResults) {
            JsonNode identifiersNode = kycResult.path("identifiers");
            if (identifiersNode.isArray() && identifiersNode.size() > 0) {
                Identifiers identifiers = mapper.convertValue(identifiersNode.get(0), Identifiers.class);
                kycMap.put(identifiers.getPtyId(), kycResult.path("kycData"));
            }
        }

        // Iterate over FinanceCH and merge
        for (JsonNode financeResult : financeResults) {
            JsonNode entityNode = financeResult.path("entity");
            if (entityNode.isMissingNode()) continue;

            Identifiers identifiers = mapper.convertValue(entityNode.path("identifiers"), Identifiers.class);
            String ptyId = identifiers.getPtyId();

            if (kycMap.containsKey(ptyId)) {
                MergedEntity merged = new MergedEntity();
                merged.setIdentifiers(identifiers);

                List<RadixData> radixDataList = Optional.ofNullable(financeResult.path("radixData"))
                        .filter(JsonNode::isArray)
                        .map(array -> StreamSupport.stream(array.spliterator(), false)
                                .map(node -> mapper.convertValue(node, RadixData.class))
                                .collect(Collectors.toList()))
                        .orElse(Collections.emptyList());

                merged.setRadixData(radixDataList);

                JsonNode kycData = kycMap.get(ptyId);

                Optional.ofNullable(kycData.get("kycSite"))
                        .filter(JsonNode::isArray)
                        .map(node -> mapper.convertValue(node, new TypeReference<List<KycSites>>() {}))
                        .ifPresent(merged::setKycSites);

                Optional.ofNullable(kycData.get("kycSegment"))
                        .filter(JsonNode::isTextual)
                        .map(JsonNode::asText)
                        .ifPresent(merged::setKycSegments);

                Optional.ofNullable(kycData.get("riskIndustry"))
                        .filter(JsonNode::isArray)
                        .map(node -> mapper.convertValue(node, new TypeReference<List<RiskIndustry>>() {}))
                        .ifPresent(merged::setRiskIndustry);

                mergedList.add(merged);
            }
        }

    } catch (HttpServerErrorException e) {
        System.err.println("FinanceCH API Server Error: " + e.getStatusCode() + " - " + e.getResponseBodyAsString());
    } catch (HttpClientErrorException e) {
        System.err.println("Client Error: " + e.getStatusCode() + " - " + e.getResponseBodyAsString());
    } catch (Exception e) {
        System.err.println("Unexpected error: " + e.getMessage());
        e.printStackTrace();
    }

    return mergedList;
}
