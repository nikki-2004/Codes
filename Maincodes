package org.example.service;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.example.model.*;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

@Service
public class DataService {

    private final RestTemplate restTemplate;
    private final ObjectMapper mapper;

    @Value("${api.financech.url}")
    private String financeChUrl;

    @Value("${api.kyc.single.url}")
    private String kycSingleUrl; // expects e.g., https://kyc/api?ptyId=

    @Value("${auth.token.url}")
    private String authTokenUrl;

    @Value("${auth.basic.auth}")
    private String basicAuth;

    private String token;

    public DataService(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
        this.mapper = new ObjectMapper();
    }

    private void fetchAuthToken() {
        try {
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
            headers.set("Authorization", basicAuth);
            headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));

            HttpEntity<String> request = new HttpEntity<>("", headers);
            ResponseEntity<String> response = restTemplate.postForEntity(authTokenUrl, request, String.class);

            if (!response.getStatusCode().is2xxSuccessful()) {
                throw new RuntimeException("‚ùå Token API failed: " + response.getStatusCode());
            }

            JsonNode json = mapper.readTree(response.getBody());
            this.token = json.path("access_token").asText();

            if (token == null || token.isBlank()) {
                throw new RuntimeException("Token missing in response");
            }

            System.out.println("‚úÖ Token fetched successfully.");
        } catch (Exception e) {
            throw new RuntimeException("‚ùå Token fetch failed: " + e.getMessage(), e);
        }
    }

    public List<MergedEntity> fetchAndMergePerPtyId() {
        List<MergedEntity> mergedList = new ArrayList<>();

        try {
            fetchAuthToken();

            HttpHeaders headers = new HttpHeaders();
            headers.setBearerAuth(this.token);
            headers.add("Accept", "*/*;version=gamma");

            HttpEntity<String> request = new HttpEntity<>(headers);

            // üåê Fetch FinanceCH data
            ResponseEntity<String> financeResponse = restTemplate.exchange(financeChUrl, HttpMethod.GET, request, String.class);
            JsonNode financeResults = mapper.readTree(financeResponse.getBody()).path("results");

            for (JsonNode finance : financeResults) {
                JsonNode entityNode = finance.path("entity");
                if (entityNode.isMissingNode()) continue;

                Identifiers identifiers = mapper.convertValue(entityNode.path("identifiers"), Identifiers.class);
                String ptyId = identifiers.getPtyId();
                if (ptyId == null || ptyId.isBlank()) continue;

                // üåê Fetch KYC for this ptyId
                String kycUrl = kycSingleUrl + ptyId;
                ResponseEntity<String> kycResponse = restTemplate.exchange(kycUrl, HttpMethod.GET, request, String.class);

                if (!kycResponse.getStatusCode().is2xxSuccessful() || kycResponse.getBody() == null || kycResponse.getBody().isBlank()) {
                    System.out.println("‚ùå No KYC data found for ptyId: " + ptyId);
                    continue;
                }

                JsonNode kycRoot = mapper.readTree(kycResponse.getBody());
                JsonNode identifiersArray = kycRoot.path("identifiers");
                JsonNode kycData = getFieldIgnoreCase(kycRoot, "kycData");

                if (kycData == null || identifiersArray.isMissingNode() || identifiersArray.isEmpty()) {
                    System.out.println("‚ùå Invalid or missing KYC data for ptyId: " + ptyId);
                    continue;
                }

                System.out.println("‚úÖ Matched and merging: ptyId = " + ptyId);
                MergedEntity merged = new MergedEntity();
                merged.setIdentifiers(identifiers);

                // üîó RadixData
                List<RadixData> radixList = Optional.ofNullable(finance.path("radixData"))
                        .filter(JsonNode::isArray)
                        .map(array -> StreamSupport.stream(array.spliterator(), false)
                                .map(node -> mapper.convertValue(node, RadixData.class))
                                .collect(Collectors.toList()))
                        .orElse(Collections.emptyList());
                merged.setRadixData(radixList);

                // üìå kycSegment
                Optional.ofNullable(getFieldIgnoreCase(kycData, "kycSegment"))
                        .filter(JsonNode::isTextual)
                        .map(JsonNode::asText)
                        .ifPresent(merged::setKycSegments);

                // üìå kycSites
                Optional.ofNullable(getFieldIgnoreCase(kycData, "kycSites"))
                        .filter(JsonNode::isArray)
                        .map(array -> mapper.convertValue(array, new TypeReference<List<KycSites>>() {}))
                        .ifPresent(merged::setKycSites);

                // üìå riskIndustry
                Optional.ofNullable(getFieldIgnoreCase(kycData, "riskIndustry"))
                        .filter(JsonNode::isArray)
                        .map(array -> mapper.convertValue(array, new TypeReference<List<RiskIndustry>>() {}))
                        .ifPresent(merged::setRiskIndustry);

                mergedList.add(merged);
            }

            System.out.println("‚úÖ Total Merged Entities: " + mergedList.size());
        } catch (Exception e) {
            System.err.println("‚ùå Error during merging: " + e.getMessage());
            e.printStackTrace();
        }

        return mergedList;
    }

    private JsonNode getFieldIgnoreCase(JsonNode node, String fieldName) {
        if (node == null || !node.isObject()) return null;
        Iterator<String> fieldNames = node.fieldNames();
        while (fieldNames.hasNext()) {
            String key = fieldNames.next();
            if (key.equalsIgnoreCase(fieldName)) {
                return node.get(key);
            }
        }
        return null;
    }
}
