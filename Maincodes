@Service
public class MergeService {

    @Value("${api.financech.url}")
    private String financeChUrl;

    @Value("${api.kyc.url}")
    private String kycUrl;

    @Value("${api.financech.token}")
    private String financeToken;

    @Value("${api.kyc.token}")
    private String kycToken;

    private final RestTemplate restTemplate;
    private final ObjectMapper mapper = new ObjectMapper();

    public MergeService(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
    }

    public List<CombinedEntity> mergeEntities() throws Exception {
        List<CombinedEntity> combinedList = new ArrayList<>();

        // üîπ Headers for Finance API
        HttpHeaders financeHeaders = new HttpHeaders();
        financeHeaders.set("Authorization", "Bearer " + financeToken);
        financeHeaders.setAccept(List.of(MediaType.APPLICATION_JSON));
        HttpEntity<String> financeEntity = new HttpEntity<>(financeHeaders);

        // üîπ Call FinanceCH API
        ResponseEntity<String> financeResponse = restTemplate.exchange(
                financeChUrl, HttpMethod.GET, financeEntity, String.class);

        JsonNode financeResults = mapper.readTree(financeResponse.getBody()).path("results");

        // üîÑ Loop through each finance result
        for (JsonNode financeNode : financeResults) {
            String ptyId = financeNode.path("entity").path("identifiers").path("ptyId").asText();
            if (ptyId == null || ptyId.isEmpty()) continue;

            // üîπ Headers for KYC API (separate)
            HttpHeaders kycHeaders = new HttpHeaders();
            kycHeaders.set("Authorization", "Bearer " + kycToken);
            kycHeaders.setAccept(List.of(MediaType.APPLICATION_JSON));
            HttpEntity<String> kycEntity = new HttpEntity<>(kycHeaders);

            String kycQueryUrl = kycUrl + "?ptyId=" + ptyId;

            JsonNode kycData = null;
            try {
                ResponseEntity<String> kycResponse = restTemplate.exchange(
                        kycQueryUrl, HttpMethod.GET, kycEntity, String.class);

                JsonNode kycResults = mapper.readTree(kycResponse.getBody()).path("results");
                if (kycResults.isArray() && kycResults.size() > 0) {
                    kycData = kycResults.get(0);
                }

            } catch (Exception e) {
                System.err.println("‚ùå KYC fetch failed for ptyId: " + ptyId + " ‚Üí " + e.getMessage());
            }

            CombinedEntity combined = new CombinedEntity();
            combined.setFinanceData(financeNode);
            combined.setKycData(kycData);
            combinedList.add(combined);
        }

        return combinedList;
    }
}
