package org.example.util;

import org.example.model.*;
import org.example.repository.ExportDataRepository;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

public class CsvExportUtil {

    private final ExportDataRepository exportDataRepository;

    public CsvExportUtil(ExportDataRepository exportDataRepository) {
        this.exportDataRepository = exportDataRepository;
    }

    public void saveToDatabase(List<MergedEntity> mergedEntities) {
        for (MergedEntity entity : mergedEntities) {

            // CRS Code
            String crsCode = Optional.ofNullable(entity.getIdentifiers())
                    .map(Identifiers::getCrdsCode)
                    .orElse("");

            // Address
            RegistrationAddress regAddr = entity.getRegistrationAddress();
            String fullAddress = "", country = "";
            if (regAddr != null) {
                fullAddress = String.join(" ",
                        Optional.ofNullable(regAddr.getLine1()).orElse(""),
                        Optional.ofNullable(regAddr.getLine2()).orElse(""),
                        Optional.ofNullable(regAddr.getCity()).orElse(""),
                        Optional.ofNullable(regAddr.getState()).orElse(""),
                        Optional.ofNullable(regAddr.getZipCode()).orElse("")
                ).trim();
                country = Optional.ofNullable(regAddr.getCountry()).orElse("");
            }

            // KYC Sites (first)
            List<KycSites> sites = entity.getKycSites();
            String siteBnpp = "", siteCountry = "", siteStatus = "";
            if (sites != null && !sites.isEmpty()) {
                KycSites site = sites.get(0);
                siteBnpp = Optional.ofNullable(site.getSiteBnpP()).orElse("");
                siteCountry = Optional.ofNullable(site.getSiteCountry()).orElse("");
                siteStatus = Optional.ofNullable(site.getSiteStatus()).orElse("");
            }

            // KYC Segment
            String segment = Optional.ofNullable(entity.getKycSegments()).orElse("");

            // RIC
            String ric = "";
            List<RiskIndustry> risks = entity.getRiskIndustry();
            if (risks != null && !risks.isEmpty()) {
                ric = risks.stream()
                        .map(r -> r.getRiskIndustryCode() + "-" + r.getRiskIndustryDescription())
                        .collect(Collectors.joining("|"));
            }

            // Save to DB
            ExportData row = new ExportData(null, crsCode, fullAddress, country, siteBnpp, siteCountry, siteStatus, segment, ric);
            exportDataRepository.save(row);
        }

        System.out.println("Data successfully saved to H2 database.");
    }
}
