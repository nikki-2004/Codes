package org.example.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.example.model.MergedEntity;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

@Service
public class FinanceChService {

    @Value("${api.financech.url}")
    private String financeChUrl;

    @Value("${api.financech.token}")
    private String financeChToken;

    private final RestTemplate restTemplate;
    private final ObjectMapper mapper;

    public FinanceChService(RestTemplate restTemplate, ObjectMapper mapper) {
        this.restTemplate = restTemplate;
        this.mapper = mapper;
    }

    public MergedEntity fetchAndStoreFinanceData() {
        try {
            // ✅ Create headers
            HttpHeaders headers = new HttpHeaders();
            
            // ✅ Extract header name and value from property
            String[] tokenParts = financeChToken.split(":", 2); // Split into "Authorization" and "Bearer xxx"
            headers.set(tokenParts[0].trim(), tokenParts[1].trim());

            HttpEntity<String> entity = new HttpEntity<>(headers);

            // ✅ Make the GET request with headers
            ResponseEntity<String> response = restTemplate.exchange(
                    financeChUrl,
                    HttpMethod.GET,
                    entity,
                    String.class
            );

            // ✅ Parse response to JsonNode
            JsonNode root = mapper.readTree(response.getBody());

            MergedEntity merged = new MergedEntity();
            merged.setFinanceData(root);
            return merged;

        } catch (Exception e) {
            throw new RuntimeException("Failed to fetch or parse FinanceCH data", e);
        }
    }
}
