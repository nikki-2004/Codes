package org.example.service;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.example.model.*;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

@Service
public class DataService {

    @Value("${api.financech.url}")
    private String financeChUrl;

    @Value("${api.kyc.url}")
    private String kycUrl;

    @Value("${api.token}")
    private String apiToken;

    private final WebClient webClient;
    private final ObjectMapper mapper;

    public DataService(ObjectMapper mapper) {
        this.mapper = mapper;
        this.webClient = WebClient.builder()
                .defaultHeader(HttpHeaders.AUTHORIZATION, "Bearer " + apiToken)
                .defaultHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)
                .build();
    }

    public List<MergedEntity> getMergedEntities() {
        List<MergedEntity> mergedList = new ArrayList<>();

        try {
            // Step 1: Call FinanceCH API (GET)
            String financeResponseBody = webClient.get()
                    .uri(financeChUrl)
                    .retrieve()
                    .bodyToMono(String.class)
                    .block();

            JsonNode financeRoot = mapper.readTree(financeResponseBody);
            JsonNode financeResults = financeRoot.path("results");

            // Step 2: Extract ptyIds and results
            List<String> ptyIds = new ArrayList<>();
            List<JsonNode> financeResultList = new ArrayList<>();
            for (JsonNode result : financeResults) {
                JsonNode entity = result.path("entity");
                if (!entity.isMissingNode() && entity.has("identifiers")) {
                    Identifiers identifiers = mapper.convertValue(entity.path("identifiers"), Identifiers.class);
                    ptyIds.add(identifiers.getPtyId());
                    financeResultList.add(result);
                }
            }

            // Step 3: Call KYC API (POST with ptyIds)
            Map<String, List<String>> requestBody = new HashMap<>();
            requestBody.put("ptyIds", ptyIds);

            String kycResponseBody = webClient.post()
                    .uri(kycUrl)
                    .body(Mono.just(requestBody), new TypeReference<Map<String, List<String>>>() {})
                    .retrieve()
                    .bodyToMono(String.class)
                    .block();

            JsonNode kycRoot = mapper.readTree(kycResponseBody);
            JsonNode kycResults = kycRoot.path("results");

            // Step 4: Index KYC by ptyId
            Map<String, JsonNode> kycMap = new HashMap<>();
            for (JsonNode kyc : kycResults) {
                JsonNode identifiersNode = kyc.path("identifiers");
                if (identifiersNode.isArray() && identifiersNode.size() > 0) {
                    Identifiers identifiers = mapper.convertValue(identifiersNode.get(0), Identifiers.class);
                    kycMap.put(identifiers.getPtyId(), kyc.path("kycData"));
                }
            }

            // Step 5: Merge each record
            for (JsonNode result : financeResultList) {
                JsonNode entity = result.path("entity");
                Identifiers identifiers = mapper.convertValue(entity.path("identifiers"), Identifiers.class);
                String ptyId = identifiers.getPtyId();

                List<RadixData> radixList = Optional.ofNullable(result.path("radixData"))
                        .filter(JsonNode::isArray)
                        .map(arr -> StreamSupport.stream(arr.spliterator(), false)
                                .map(r -> mapper.convertValue(r, RadixData.class))
                                .collect(Collectors.toList()))
                        .orElse(Collections.emptyList());

                MergedEntity merged = new MergedEntity();
                merged.setIdentifiers(identifiers);
                merged.setRadixData(radixList);

                JsonNode kycData = kycMap.get(ptyId);
                if (kycData != null) {
                    Optional.ofNullable(kycData.get("kycSites"))
                            .filter(JsonNode::isArray)
                            .map(node -> mapper.convertValue(node, new TypeReference<List<KycSites>>() {
                            }))
                            .ifPresentOrElse(merged::setKycSites, () -> merged.setKycSites(null));

                    Optional.ofNullable(kycData.get("kycSegment"))
                            .filter(JsonNode::isTextual)
                            .map(JsonNode::asText)
                            .ifPresentOrElse(merged::setKycSegments, () -> merged.setKycSegments(null));

                    Optional.ofNullable(kycData.get("riskIndustry"))
                            .filter(JsonNode::isArray)
                            .map(node -> mapper.convertValue(node, new TypeReference<List<RiskIndustry>>() {
                            }))
                            .ifPresentOrElse(merged::setRiskIndustry, () -> merged.setRiskIndustry(null));
                } else {
                    merged.setKycSites(null);
                    merged.setKycSegments(null);
                    merged.setRiskIndustry(null);
                }

                mergedList.add(merged);
            }

        } catch (Exception e) {
            System.err.println("Exception during merging: " + e.getMessage());
            e.printStackTrace();
        }

        return mergedList;
    }
}
