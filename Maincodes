package org.example.service;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.example.Model.*;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

@Service
public class DataService {

    @Value("${finance.api.url}")
    private String financeApiUrl;

    @Value("${kyc.api.url}")
    private String kycApiUrl;

    private final RestTemplate restTemplate = new RestTemplate();
    private final ObjectMapper mapper = new ObjectMapper();

    public List<MergedEntity> getMergedEntities() {
        List<MergedEntity> mergedList = new ArrayList<>();

        try {
            // Step 1: Fetch data from both APIs
            String financeJson = restTemplate.getForObject(financeApiUrl, String.class);
            String kycJson = restTemplate.getForObject(kycApiUrl, String.class);

            // Step 2: Parse both JSONs
            JsonNode financeRoot = mapper.readTree(financeJson);
            JsonNode kycRoot = mapper.readTree(kycJson);

            JsonNode financeResults = financeRoot.path("result");
            JsonNode kycResults = kycRoot.path("result");

            // Step 3: Loop through finance results
            for (JsonNode financeNode : financeResults) {
                JsonNode entityNode = financeNode.path("entity");
                if (entityNode.isMissingNode()) continue;

                Identifiers identifiers = mapper.convertValue(entityNode.path("identifiers"), Identifiers.class);
                if (identifiers.getPtyId() == null) continue;

                // Extract radixData
                List<RadixData> radixList = Optional.ofNullable(financeNode.path("radixData"))
                        .filter(JsonNode::isArray)
                        .map(array -> StreamSupport.stream(array.spliterator(), false)
                                .map(node -> mapper.convertValue(node, RadixData.class))
                                .collect(Collectors.toList()))
                        .orElse(Collections.emptyList());

                // Step 4: Match ptyId in KYC result
                JsonNode matchedKyc = StreamSupport.stream(kycResults.spliterator(), false)
                        .filter(kycNode -> {
                            JsonNode ids = kycNode.path("identifiers");
                            return ids.isArray() && ids.size() > 0 &&
                                   identifiers.getPtyId().equals(
                                       mapper.convertValue(ids.get(0), Identifiers.class).getPtyId());
                        })
                        .findFirst()
                        .orElse(null);

                // Step 5: Create merged entity
                MergedEntity merged = new MergedEntity();
                merged.setIdentifiers(identifiers);
                merged.setRadixData(radixList);

                if (matchedKyc != null) {
                    JsonNode kycData = matchedKyc.path("kycData");

                    Optional.ofNullable(kycData.get("kycSite"))
                            .filter(JsonNode::isArray)
                            .map(node -> mapper.convertValue(node, new TypeReference<List<KycSites>>() {}))
                            .ifPresent(merged::setKycSites);

                    Optional.ofNullable(kycData.get("kycSegment"))
                            .filter(JsonNode::isTextual)
                            .map(JsonNode::asText)
                            .ifPresent(merged::setKycSegments);

                    Optional.ofNullable(kycData.get("riskIndustry"))
                            .filter(JsonNode::isArray)
                            .map(node -> mapper.convertValue(node, new TypeReference<List<RiskIndustry>>() {}))
                            .ifPresent(merged::setRiskIndustry);
                }

                mergedList.add(merged);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        return mergedList;
    }
}
