package org.example.service;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.example.model.*;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

@Service
public class DataService {

    private final RestTemplate restTemplate;
    private final ObjectMapper mapper;

    @Value("${api.financech.url}")
    private String financeChUrl;

    @Value("${api.kyc.single.url}")
    private String kycSingleUrl; // expects: "https://.../kyc?ptyId="

    @Value("${auth.token.url}")
    private String authTokenUrl;

    @Value("${auth.basic.auth}")
    private String basicAuth;

    private String token;

    public DataService(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
        this.mapper = new ObjectMapper();
    }

    // üîê Fetch token
    private void fetchAuthToken() {
        try {
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
            headers.set("Authorization", basicAuth);
            headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));

            HttpEntity<String> request = new HttpEntity<>("", headers);
            ResponseEntity<String> response = restTemplate.postForEntity(authTokenUrl, request, String.class);

            if (!response.getStatusCode().is2xxSuccessful()) {
                throw new RuntimeException("‚ùå Token API failed: " + response.getStatusCode());
            }

            JsonNode json = mapper.readTree(response.getBody());
            this.token = json.path("access_token").asText();

            if (token == null || token.isBlank()) {
                throw new RuntimeException("‚ùå Token missing in response");
            }

            System.out.println("‚úÖ Token fetched successfully.");
        } catch (Exception e) {
            throw new RuntimeException("‚ùå Token fetch failed: " + e.getMessage(), e);
        }
    }

    // ‚úÖ Final method to merge using per-ptyId KYC call
    public List<MergedEntity> fetchAndMergeByPtyIdLoop() {
        List<MergedEntity> mergedEntities = new ArrayList<>();

        try {
            fetchAuthToken();

            HttpHeaders headers = new HttpHeaders();
            headers.setBearerAuth(this.token);
            headers.add("Accept", "*/*;version=gamma");
            HttpEntity<String> request = new HttpEntity<>(headers);

            // üåê Get all finance data
            ResponseEntity<String> financeResponse = restTemplate.exchange(financeChUrl, HttpMethod.GET, request, String.class);
            JsonNode financeResults = mapper.readTree(financeResponse.getBody()).path("results");

            for (JsonNode finance : financeResults) {
                JsonNode entityNode = finance.path("entity");
                if (entityNode.isMissingNode()) continue;

                Identifiers identifiers = mapper.convertValue(entityNode.path("identifiers"), Identifiers.class);
                String ptyId = identifiers.getPtyId();

                if (ptyId == null || ptyId.isBlank()) continue;

                // üåê Build dynamic KYC URL for this ptyId
                String finalKycUrl = kycSingleUrl + ptyId;

                try {
                    ResponseEntity<String> kycResponse = restTemplate.exchange(finalKycUrl, HttpMethod.GET, request, String.class);

                    if (!kycResponse.getStatusCode().is2xxSuccessful() || kycResponse.getBody() == null || kycResponse.getBody().isBlank()) {
                        System.out.println("‚ùå No KYC data for ptyId: " + ptyId);
                        continue;
                    }

                    JsonNode kycRoot = mapper.readTree(kycResponse.getBody());
                    JsonNode identifiersArray = kycRoot.path("identifiers");
                    JsonNode kycData = getFieldIgnoreCase(kycRoot, "kycData");

                    if (kycData == null || identifiersArray.isMissingNode() || identifiersArray.isEmpty()) {
                        System.out.println("‚ùå Invalid or missing KYC data for ptyId: " + ptyId);
                        continue;
                    }

                    System.out.println("‚úÖ Merging ptyId: " + ptyId);
                    MergedEntity merged = new MergedEntity();
                    merged.setIdentifiers(identifiers);

                    // üì¶ RadixData
                    List<RadixData> radixList = Optional.ofNullable(finance.path("radixData"))
                            .filter(JsonNode::isArray)
                            .map(array -> StreamSupport.stream(array.spliterator(), false)
                                    .map(node -> mapper.convertValue(node, RadixData.class))
                                    .collect(Collectors.toList()))
                            .orElse(Collections.emptyList());
                    merged.setRadixData(radixList);

                    // üìå KYC Segment
                    Optional.ofNullable(getFieldIgnoreCase(kycData, "kycSegment"))
                            .filter(JsonNode::isTextual)
                            .map(JsonNode::asText)
                            .ifPresent(merged::setKycSegments);

                    // üìå KYC Sites
                    Optional.ofNullable(getFieldIgnoreCase(kycData, "kycSites"))
                            .filter(JsonNode::isArray)
                            .map(array -> mapper.convertValue(array, new TypeReference<List<KycSites>>() {}))
                            .ifPresent(merged::setKycSites);

                    // üìå Risk Industry
                    Optional.ofNullable(getFieldIgnoreCase(kycData, "riskIndustry"))
                            .filter(JsonNode::isArray)
                            .map(array -> mapper.convertValue(array, new TypeReference<List<RiskIndustry>>() {}))
                            .ifPresent(merged::setRiskIndustry);

                    mergedEntities.add(merged);

                } catch (Exception kycEx) {
                    System.err.println("‚ùå KYC call failed for ptyId: " + ptyId + " | " + kycEx.getMessage());
                }
            }

            System.out.println("‚úÖ Total merged entities: " + mergedEntities.size());

        } catch (Exception e) {
            System.err.println("‚ùå Overall error: " + e.getMessage());
            e.printStackTrace();
        }

        return mergedEntities;
    }

    private JsonNode getFieldIgnoreCase(JsonNode node, String fieldName) {
        if (node == null || !node.isObject()) return null;
        Iterator<String> it = node.fieldNames();
        while (it.hasNext()) {
            String key = it.next();
            if (key.equalsIgnoreCase(fieldName)) {
                return node.get(key);
            }
        }
        return null;
    }
}
