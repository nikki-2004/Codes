import java.io.FileWriter;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

public void exportToCsv(List<MergedEntity> mergedEntities, String filePath) {
    try (FileWriter writer = new FileWriter(filePath)) {

        // Header
        writer.write("CRS CODE;Reg Address;Reg Address Country;Site BNPP;Site Country;Site Status;KYC Segment;RIC\n");

        for (MergedEntity entity : mergedEntities) {
            StringBuilder line = new StringBuilder();

            // CRS CODE
            String crsCode = Optional.ofNullable(entity.getIdentifiers())
                    .map(Identifiers::getCrdsCode).orElse("");
            line.append(crsCode).append(";");

            // Reg Address (Line1 + Line2 + City + State + Zipcode)
            RegistrationAddress regAddr = entity.getRegistrationAddress();
            String fullAddress = "";
            String country = "";
            if (regAddr != null) {
                fullAddress = String.join(" ",
                        Optional.ofNullable(regAddr.getLine1()).orElse(""),
                        Optional.ofNullable(regAddr.getLine2()).orElse(""),
                        Optional.ofNullable(regAddr.getCity()).orElse(""),
                        Optional.ofNullable(regAddr.getState()).orElse(""),
                        Optional.ofNullable(regAddr.getZipcode()).orElse("")
                ).trim();
                country = Optional.ofNullable(regAddr.getCountry()).orElse("");
            }
            line.append(fullAddress).append(";");
            line.append(country).append(";");

            // KYC Sites (print only the first site)
            List<KycSites> sites = entity.getKycSites();
            String siteBnpP = "", siteCountry = "", siteStatus = "";
            if (sites != null && !sites.isEmpty()) {
                KycSites site = sites.get(0);
                siteBnpP = Optional.ofNullable(site.getSiteBnpP()).orElse("");
                siteCountry = Optional.ofNullable(site.getSiteCountry()).orElse("");
                siteStatus = Optional.ofNullable(site.getSiteStatus()).orElse("");
            }
            line.append(siteBnpP).append(";");
            line.append(siteCountry).append(";");
            line.append(siteStatus).append(";");

            // KYC Segment
            String segment = Optional.ofNullable(entity.getKycSegments()).orElse("");
            line.append(segment).append(";");

            // RIC (CODE-DESCRIPTION, joined with '|')
            String ric = "";
            List<RiskIndustry> risks = entity.getRiskIndustry();
            if (risks != null && !risks.isEmpty()) {
                ric = risks.stream()
                        .map(r -> r.getRiskIndustryCode() + "-" + r.getRiskIndustryDescription())
                        .collect(Collectors.joining("|"));
            }
            line.append(ric).append("\n");

            // Write line
            writer.write(line.toString());
        }

        writer.flush();
        System.out.println("CSV export successful: " + filePath);

    } catch (IOException e) {
        e.printStackTrace();
        throw new RuntimeException("Error writing CSV: " + e.getMessage(), e);
    }
}
