package org.example.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.example.model.Identifiers;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

@Service
public class DataService {

    private final RestTemplate restTemplate;
    private final ObjectMapper mapper;

    @Value("${api.financech.url}")
    private String financeChUrl;

    @Value("${api.kyc.url}")
    private String kycUrl;

    @Value("${auth.token.url}")
    private String authTokenUrl;

    @Value("${auth.basic.auth}")
    private String basicAuth;

    private String token;

    public DataService(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
        this.mapper = new ObjectMapper();
    }

    // üîê Step 1: Fetch the access token
    private void fetchAuthToken() {
        try {
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
            headers.set("Authorization", basicAuth);
            headers.setAccept(MediaType.parseMediaTypes("application/json"));

            HttpEntity<String> request = new HttpEntity<>("", headers);

            ResponseEntity<String> response = restTemplate.postForEntity(authTokenUrl, request, String.class);

            if (!response.getStatusCode().is2xxSuccessful()) {
                throw new RuntimeException("‚ùå Token API failed: " + response.getStatusCode());
            }

            JsonNode json = mapper.readTree(response.getBody());
            this.token = json.path("access_token").asText();

            if (token == null || token.isBlank()) {
                throw new RuntimeException("‚ùå Access token not found in response");
            }

            System.out.println("‚úÖ Token fetched successfully.");

        } catch (Exception e) {
            throw new RuntimeException("‚ùå Error fetching token: " + e.getMessage(), e);
        }
    }

    // ‚úÖ Step 2: Loop over every FinanceCH ptyId and check if it's in KYC
    public void checkAllPtyIdMatches() {
        try {
            fetchAuthToken();

            HttpHeaders headers = new HttpHeaders();
            headers.setBearerAuth(this.token);
            headers.add("Accept", "*/*;version=gamma");

            HttpEntity<String> request = new HttpEntity<>(headers);

            // Step 3: Fetch FinanceCH data
            ResponseEntity<String> financeResponse = restTemplate.exchange(financeChUrl, HttpMethod.GET, request, String.class);
            if (!financeResponse.getStatusCode().is2xxSuccessful()) {
                throw new RuntimeException("‚ùå FinanceCH API failed: " + financeResponse.getStatusCode());
            }
            JsonNode financeResults = mapper.readTree(financeResponse.getBody()).path("results");

            // Step 4: Fetch KYC data
            ResponseEntity<String> kycResponse = restTemplate.exchange(kycUrl, HttpMethod.GET, request, String.class);
            if (!kycResponse.getStatusCode().is2xxSuccessful()) {
                throw new RuntimeException("‚ùå KYC API failed: " + kycResponse.getStatusCode());
            }
            JsonNode kycResults = mapper.readTree(kycResponse.getBody()).path("results");

            // Step 5: Extract all KYC ptyIds into a map
            Map<String, Boolean> kycPtyIdMap = new HashMap<>();
            for (JsonNode kyc : kycResults) {
                JsonNode ids = kyc.path("identifiers");
                if (ids.isArray() && ids.size() > 0) {
                    Identifiers kycIdentifiers = mapper.convertValue(ids.get(0), Identifiers.class);
                    if (kycIdentifiers.getPtyId() != null) {
                        kycPtyIdMap.put(kycIdentifiers.getPtyId(), true);
                    }
                }
            }

            // Step 6: Loop through FinanceCH and check matches
            for (JsonNode finance : financeResults) {
                JsonNode entityNode = finance.path("entity");
                if (entityNode.isMissingNode()) continue;

                Identifiers financeIdentifiers = mapper.convertValue(entityNode.path("identifiers"), Identifiers.class);
                String ptyId = financeIdentifiers.getPtyId();

                if (ptyId == null || ptyId.isBlank()) continue;

                if (kycPtyIdMap.containsKey(ptyId)) {
                    System.out.println("‚úÖ Matched: ptyId = " + ptyId);
                } else {
                    System.out.println("‚ùå Not Found in KYC: ptyId = " + ptyId);
                }
            }

        } catch (Exception e) {
            System.err.println("‚ùå Error: " + e.getMessage());
            e.printStackTrace();
        }
    }

    // Optional helper for case-insensitive field access
    private JsonNode getFieldIgnoreCase(JsonNode node, String fieldName) {
        if (node == null || !node.isObject()) return null;
        Iterator<String> it = node.fieldNames();
        while (it.hasNext()) {
            String key = it.next();
            if (key.equalsIgnoreCase(fieldName)) {
                return node.get(key);
            }
        }
        return null;
    }
}
