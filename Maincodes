package org.example.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.example.model.MergedEntity;
import org.example.util.SSLUtil;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.*;

@Service
public class MergeService {

    @Value("${api.financech.url}")
    private String financeChUrl;

    @Value("${api.kyc.url}")
    private String kycUrl;

    @Value("${api.token}")
    private String token;

    private final ObjectMapper mapper = new ObjectMapper();

    public List<MergedEntity> fetchAndMergeData() throws Exception {
        // Disable SSL checks for staging
        SSLUtil.disableSSLVerification();

        RestTemplate restTemplate = new RestTemplate();

        // Set Bearer Token
        HttpHeaders headers = new HttpHeaders();
        headers.setBearerAuth(token);
        headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));
        HttpEntity<String> entity = new HttpEntity<>(headers);

        // Call FinanceCH API
        ResponseEntity<String> financeResponse = restTemplate.exchange(
                financeChUrl, HttpMethod.GET, entity, String.class);
        JsonNode financeResults = mapper.readTree(financeResponse.getBody()).path("results");

        // Call KYC API
        ResponseEntity<String> kycResponse = restTemplate.exchange(
                kycUrl, HttpMethod.GET, entity, String.class);
        JsonNode kycResults = mapper.readTree(kycResponse.getBody()).path("results");

        // Map KYC by ptyId
        Map<String, JsonNode> kycMap = new HashMap<>();
        for (JsonNode kycNode : kycResults) {
            String ptyId = kycNode.path("entity").path("identifiers").path("ptyId").asText();
            if (!ptyId.isEmpty()) {
                kycMap.put(ptyId, kycNode);
            }
        }

        List<MergedEntity> mergedList = new ArrayList<>();
        for (JsonNode financeNode : financeResults) {
            String ptyId = financeNode.path("entity").path("identifiers").path("ptyId").asText();

            MergedEntity merged = new MergedEntity();
            merged.setFinanceData(financeNode);
            merged.setKycData(kycMap.getOrDefault(ptyId, null)); // could be null if not matched

            mergedList.add(merged);
        }

        return mergedList;
    }
}
