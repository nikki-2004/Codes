package org.example.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.example.model.MergedEntity;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.*;

@Service
public class MergeService {

    @Value("${api.financech.url}")
    private String financeChUrl;

    @Value("${api.kyc.url}")
    private String kycUrl;

    private final ObjectMapper mapper = new ObjectMapper();

    public List<MergedEntity> fetchAndMergeData() throws Exception {
        RestTemplate restTemplate = new RestTemplate();

        // Fetch FinanceCH data
        String financeResponse = restTemplate.getForObject(financeChUrl, String.class);
        JsonNode financeResults = mapper.readTree(financeResponse).path("results");

        // Fetch KYC data
        String kycResponse = restTemplate.getForObject(kycUrl, String.class);
        JsonNode kycResults = mapper.readTree(kycResponse).path("results");

        // Build a map from KYC data by ptyId
        Map<String, JsonNode> kycMap = new HashMap<>();
        for (JsonNode kycNode : kycResults) {
            String ptyId = kycNode.path("entity").path("identifiers").path("ptyId").asText();
            if (!ptyId.isEmpty()) {
                kycMap.put(ptyId, kycNode);
            }
        }

        List<MergedEntity> mergedEntities = new ArrayList<>();

        for (JsonNode financeNode : financeResults) {
            String ptyId = financeNode.path("entity").path("identifiers").path("ptyId").asText();
            MergedEntity merged = new MergedEntity();

            merged.setFinanceData(financeNode);
            merged.setKycData(kycMap.getOrDefault(ptyId, null)); // may be null if no match

            mergedEntities.add(merged);
        }

        return mergedEntities;
    }
}
